<canvas id="imageCanvasBack" class="border w-full"></canvas>
<script>
  const canvasBack = document.getElementById('imageCanvasBack');

  const ctxBack = canvasBack.getContext('2d');

  function loadImageBack(imageUrl) {
    const imgBack = new Image();
    imgBack.src = imageUrl; 
    imgBack.height = 374.1;
    imgBack.width = 793.7;
    imgBack.onload = () => {
      canvasBack.width = imgBack.width; 
      canvasBack.height = imgBack.height; 
      
      ctxBack.save();
      
      ctxBack.clearRect(0, 0, canvasBack.width, canvasBack.height); 
      ctxBack.drawImage(imgBack, 0, 0, canvasBack.width, canvasBack.height);
     
      drawTextBack('2c6ae4daf15f015e4280dda81412ca0be915e846db46a58d951a86e2a82ef2fe', 'private_key_address');      
      drawTextBack('Private Key Address', 'private_key_address_label');      
      drawTextBack('03f75dda406b1c20201aef7f3fcd7adb0ef6cab1cad3519dbb08a43cfd3adef460', 'public_key_address');      
      drawTextBack('Public Key Address', 'public_key_address_label');      
      drawQRCodePrivate(canvasBack, ctxBack);
      drawQRCodePublic(canvasBack, ctxBack);
   
    };

    imgBack.onerror = () => {
      console.error('Image Back failed to load.');
    };
  }
  const elementConfigs = <%= raw @hong_bao.paper.elements.to_json %>;   

  function drawTextBack(text, element) {
    const elementParams = elementConfigs[element]; 
    ctxBack.fillStyle = 'black';
    ctxBack.font = `400 ${elementParams["size"]}px Arial`;
    ctxBack.fillText(text, 
        canvasBack.width * elementParams["x"], 
        canvasBack.height * elementParams["y"]
    );
}

  function drawLabelWithBackground(ctx, text, labelCoords, canvas) {
    ctx.font = `${labelCoords["size"]}px Arial`;
    ctx.textBaseline = 'middle';
    
    const textMetrics = ctx.measureText(text);
    const padding = 5;
    const borderRadius = 20;
    
    ctx.fillStyle = `rgba(${labelCoords["color"]}, ${labelCoords["opacity"]})`;
    ctx.beginPath();
    ctx.roundRect(
      canvas.width * labelCoords["x"] - padding,
      canvas.height * labelCoords["y"] - labelCoords["size"]/2 - padding,
      textMetrics.width + (padding * 2),
      labelCoords["size"] + (padding * 2),
      borderRadius
    );
    ctx.fill();
    
    ctx.fillStyle = 'black';
    ctx.fillText(text, 
      canvas.width * labelCoords["x"], 
      canvas.height * labelCoords["y"]
    );
  }

  function drawQRCodePrivate(canvas, ctx) {
    const qrImage = new Image();
    qrImage.src = '<%= asset_path("donation-qrcode.png") %>';
    qrImage.onload = () => {
      // Draw QR code
      const qrcodePrivateCoords = <%= raw @hong_bao.paper.elements["qrcode_private_key"].to_json %>; 
      const qrWidth = canvas.width * qrcodePrivateCoords["size"]; 
      const qrHeight = canvas.width * qrcodePrivateCoords["size"]; 
      ctx.drawImage(qrImage, 
        canvas.width * qrcodePrivateCoords["x"], 
        canvas.height * qrcodePrivateCoords["y"], 
        qrWidth, 
        qrHeight
      );

      // Draw label
      const labelCoords = <%= raw @hong_bao.paper.elements["qrcode_private_key_label"].to_json %>;
      drawLabelWithBackground(ctx, 'Private Key', labelCoords, canvas);
    };
  }

  function drawQRCodePublic(canvas, ctx) {
    const qrImage = new Image();
    qrImage.src = '<%= asset_path("donation-qrcode.png") %>';
    qrImage.onload = () => {
      // Draw QR code
      const qrcodePublicCoords = <%= raw @hong_bao.paper.elements["qrcode_public_key"].to_json %>; 
      const qrWidth = canvas.width * qrcodePublicCoords["size"]; 
      const qrHeight = canvas.width * qrcodePublicCoords["size"]; 
      ctx.drawImage(qrImage, 
        canvas.width * qrcodePublicCoords["x"], 
        canvas.height * qrcodePublicCoords["y"], 
        qrWidth, 
        qrHeight
      );

      // Draw label
      const labelCoords = <%= raw @hong_bao.paper.elements["qrcode_public_key_label"].to_json %>;
      drawLabelWithBackground(ctx, 'Public Key', labelCoords, canvas);
    };
  }

  const paperImageBackUrl = '<%= @hong_bao.paper.image_back.attached? ? url_for(@hong_bao.paper.image_back) : "" %>'; 
  loadImageBack(paperImageBackUrl);
</script> 
