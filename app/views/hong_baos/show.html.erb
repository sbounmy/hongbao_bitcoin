<div class="min-h-screen bg-[#FFE5E5] flex flex-col items-center justify-center gap-8 py-4">
<div class="w-full max-w-[480px] bg-[#F04747] p-8 
            border-4 border-[#FFB636] outline outline-8 outline-[#F04747] 
            shadow-lg relative">
<div class="container mx-auto p-4">
  <h1 class="text-2xl mb-4">Hong Bao Details</h1>
    
  <%# <% if @hong_bao.paid? %>
    <%# button_to "Print Hong Bao", 
                  print_hong_bao_path(@hong_bao),
                  method: :post,
                  class: "btn btn-primary" %>
  <%# <% elsif @hong_bao.pending? %>
    <%# <div class="alert alert-info">
      Waiting for payment confirmation...
    </div> %>
  <%# <% end %>
  </div>
<div class="mt-6 space-y-4 animate-fade-in">

  <div class="relative">
    <canvas id="imageCanvasBack" class="border w-full"></canvas>
  </div>
    <div class="relative">
    <canvas id="imageCanvas" class="border w-full"></canvas>
  </div>
</div>
</div>
</div>
<script>
  const canvas = document.getElementById('imageCanvas');
  const canvasBack = document.getElementById('imageCanvasBack');

  const ctx = canvas.getContext('2d');
  const ctxBack = canvasBack.getContext('2d');
  function loadImageFront(imageUrl) {
    const img = new Image();
    img.src = imageUrl; 

    img.onload = () => {
      canvas.width = img.width; 
      canvas.height = img.height; 
      img.style.border = '2px dashed #000';
      img.style.padding = '10px';
      
      ctx.clearRect(0, 0, canvas.width, canvas.height); 
      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      
      ctx.font = 'bold '+img.height*0.2+'px Arial';
      ctx.fillStyle = 'black';
      
      const amount = '<%= @hong_bao.amount %>';
      ctx.fillText(amount, canvas.width * 0.72, canvas.height * 0.55);
      
      ctx.font = '800 20px Arial';
      ctx.fillText('0.0005', canvas.width * 0.72, canvas.height * 0.7);
    };

    img.onerror = () => {
      console.error('Image failed to load.');
    };
  }

  function loadImageBack(imageUrl) {
    const imgBack = new Image();
    imgBack.src = imageUrl; 
    imgBack.height = 250.56;
    imgBack.width = 589.44;
    imgBack.onload = () => {
      canvasBack.width = imgBack.width; 
      canvasBack.height = imgBack.height; 
      
      // Save the current context state
      ctxBack.save();
      
      // Flip the context vertically
      // ctxBack.scale(1, -1);
      // ctxBack.translate(0, -canvasBack.height);
      
      ctxBack.clearRect(0, 0, canvasBack.width, canvasBack.height); 
      ctxBack.drawImage(imgBack, 0, 0, canvasBack.width, canvasBack.height);
      
      // Flip back for text and QR codes to be readable
      // ctxBack.scale(1, -1);
      // ctxBack.translate(0, -canvasBack.height);
      
      ctxBack.font = '600 18px Arial';
      ctxBack.fillStyle = 'black';
      ctxBack.fillText('u12gejv12yvejy12veh12', canvasBack.width * 0.32, canvasBack.height * 0.45);
      ctxBack.fillText('u12gejv12yvejy12veh12', canvasBack.width * 0.32, canvasBack.height * 0.73);
      
      drawQRCodePrivate(canvasBack, ctxBack);
      drawQRCodePublic(canvasBack, ctxBack);
      
      // Restore the context to its original state
      // ctxBack.restore();
    };

    imgBack.onerror = () => {
      console.error('Image Back failed to load.');
    };
  }

  function drawQRCodePrivate(canvas,ctx) {
    const qrImage = new Image();
    qrImage.src = '<%= asset_path("donation-qrcode.png") %>';
    qrImage.onload = () => {
      const qrWidth = canvas.width * 0.17; 
      const qrHeight = canvas.width * 0.17; 
      ctx.drawImage(qrImage, canvas.width * 0.1, canvas.height * 0.3, qrWidth, qrHeight);
    };
  }

  function drawQRCodePublic(canvas,ctx) {
    const qrImage = new Image();
    qrImage.src = '<%= asset_path("donation-qrcode.png") %>';
    qrImage.onload = () => {
      const qrWidth = canvas.width * 0.17; 
      const qrHeight = canvas.width * 0.17; 
      ctx.drawImage(qrImage, canvas.width * 0.75, canvas.height * 0.3, qrWidth, qrHeight); 
    };
  }
  const paperImageFrontUrl = '<%= 
    front_image = @hong_bao.paper.images.find { |image| image.filename.to_s.downcase.include?('front') }
    front_image ? url_for(front_image) : ""
  %>';
  loadImageFront(paperImageFrontUrl);
  const paperImageBackUrl = '<%= 
    back_image = @hong_bao.paper.images.find { |image| image.filename.to_s.downcase.include?('back') }
    back_image ? url_for(back_image) : ""
  %>'; 
  loadImageBack(paperImageBackUrl);
</script> 