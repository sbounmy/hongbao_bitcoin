<div class="min-h-screen bg-[#FFE5E5] flex flex-col items-center justify-center gap-8 py-4">
<div class="w-full max-w-[480px] bg-[#F04747] p-8 
            border-4 border-[#FFB636] outline outline-8 outline-[#F04747] 
            shadow-lg relative">
<div class="container mx-auto p-4">
  <h1 class="text-2xl mb-4">Hong Bao Details</h1>
  </div>
<div class="mt-6 space-y-4 animate-fade-in">
    <canvas id="imageCanvasBack" class="border w-full"></canvas>
    <canvas id="imageCanvas" class="border w-full"></canvas>
</div>
</div>
</div>
<script>
  const canvas = document.getElementById('imageCanvas');
  const canvasBack = document.getElementById('imageCanvasBack');

  const ctx = canvas.getContext('2d');
  const ctxBack = canvasBack.getContext('2d');

  function drawLabelWithBackground(ctx, text, labelCoords, canvas) {
    ctx.font = `${labelCoords["size"]}px Arial`;
    ctx.textBaseline = 'middle';
    
    const textMetrics = ctx.measureText(text);
    const padding = 5;
    const borderRadius = 20;
    
    ctx.fillStyle = `rgba(${labelCoords["color"]}, ${labelCoords["opacity"]})`;
    ctx.beginPath();
    ctx.roundRect(
      canvas.width * labelCoords["x"] - padding,
      canvas.height * labelCoords["y"] - labelCoords["size"]/2 - padding,
      textMetrics.width + (padding * 2),
      labelCoords["size"] + (padding * 2),
      borderRadius
    );
    ctx.fill();
    
    ctx.fillStyle = 'black';
    ctx.fillText(text, 
      canvas.width * labelCoords["x"], 
      canvas.height * labelCoords["y"]
    );
  }

  function loadImageFront(imageUrl) {
    const img = new Image();
    img.src = imageUrl; 
    img.height = 374.1;
    img.width = 793.7;
    img.onload = () => {
      canvas.width = img.width; 
      canvas.height = img.height; 
      
      ctx.clearRect(0, 0, canvas.width, canvas.height); 
      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      
           
      ctx.fillStyle = 'black';
      const amount = '<%= @hong_bao.amount %>';
      const amountCoords = <%= raw @hong_bao.paper.elements["amount"].to_json %>; 
      
      ctx.font = `bold ${amountCoords["size"]}px Arial`;
      ctx.fillText(amount, 
        canvas.width * amountCoords["x"], 
        canvas.height * amountCoords["y"]
      );
      
      const amountBtcCoords = <%= raw @hong_bao.paper.elements["amount_btc"].to_json %>;
      ctx.font = `800 ${amountBtcCoords["size"]}px Arial`;
      ctx.fillText('0.0005', 
        canvas.width * amountBtcCoords["x"], 
        canvas.height * amountBtcCoords["y"]
      );
    };
  }

  function loadImageBack(imageUrl) {
    const imgBack = new Image();
    imgBack.src = imageUrl; 
    imgBack.height = 374.1;
    imgBack.width = 793.7;
    imgBack.onload = () => {
      canvasBack.width = imgBack.width; 
      canvasBack.height = imgBack.height; 
      
      ctxBack.clearRect(0, 0, canvasBack.width, canvasBack.height); 
      ctxBack.drawImage(imgBack, 0, 0, canvasBack.width, canvasBack.height);
      
      const privateKeyAddressCoords = <%= raw @hong_bao.paper.elements["private_key_address"].to_json %>; 
      ctxBack.fillStyle = 'black';
      ctxBack.font = `600 ${privateKeyAddressCoords["size"]}px Arial`;
      ctxBack.fillText('2c6ae4daf15f015e4280dda81412ca0be915e846db46a58d951a86e2a82ef2fe', 
        canvasBack.width * privateKeyAddressCoords["x"], 
        canvasBack.height * privateKeyAddressCoords["y"]
      );
      
      const privateKeyAddressLabelCoords = <%= raw @hong_bao.paper.elements["private_key_address_label"].to_json %>; 
      ctxBack.fillStyle = 'black';
      ctxBack.font = `600 ${privateKeyAddressLabelCoords["size"]}px Arial`;
      ctxBack.fillText('Private Key Address', 
        canvasBack.width * privateKeyAddressLabelCoords["x"], 
        canvasBack.height * privateKeyAddressLabelCoords["y"]
      );
      
      const publicKeyAddressCoords = <%= raw @hong_bao.paper.elements["public_key_address"].to_json %>; 
      ctxBack.font = `600 ${publicKeyAddressCoords["size"]}px Arial`;
      ctxBack.fillText('03f75dda406b1c20201aef7f3fcd7adb0ef6cab1cad3519dbb08a43cfd3adef460', 
        canvasBack.width * publicKeyAddressCoords["x"], 
        canvasBack.height * publicKeyAddressCoords["y"]
      );
      
      const publicKeyAddressLabelCoords = <%= raw @hong_bao.paper.elements["public_key_address_label"].to_json %>; 
      ctxBack.fillStyle = 'black';
      ctxBack.font = `600 ${publicKeyAddressLabelCoords["size"]}px Arial`;
      ctxBack.fillText('Public Key Address', 
        canvasBack.width * publicKeyAddressLabelCoords["x"], 
        canvasBack.height * publicKeyAddressLabelCoords["y"]
      );
      
      drawQRCodePrivate(canvasBack, ctxBack);
      drawQRCodePublic(canvasBack, ctxBack);
    };
  }

  function drawQRCodePrivate(canvas, ctx) {
    const qrImage = new Image();
    qrImage.src = '<%= asset_path("donation-qrcode.png") %>';
    qrImage.onload = () => {
      // Draw QR code
      const qrcodePrivateCoords = <%= raw @hong_bao.paper.elements["qrcode_private_key"].to_json %>; 
      const qrWidth = canvas.width * qrcodePrivateCoords["size"]; 
      const qrHeight = canvas.width * qrcodePrivateCoords["size"]; 
      ctx.drawImage(qrImage, 
        canvas.width * qrcodePrivateCoords["x"], 
        canvas.height * qrcodePrivateCoords["y"], 
        qrWidth, 
        qrHeight
      );

      // Draw label
      const labelCoords = <%= raw @hong_bao.paper.elements["qrcode_private_key_label"].to_json %>;
      drawLabelWithBackground(ctx, 'Private Key', labelCoords, canvas);
    };
  }

  function drawQRCodePublic(canvas, ctx) {
    const qrImage = new Image();
    qrImage.src = '<%= asset_path("donation-qrcode.png") %>';
    qrImage.onload = () => {
      // Draw QR code
      const qrcodePublicCoords = <%= raw @hong_bao.paper.elements["qrcode_public_key"].to_json %>; 
      const qrWidth = canvas.width * qrcodePublicCoords["size"]; 
      const qrHeight = canvas.width * qrcodePublicCoords["size"]; 
      ctx.drawImage(qrImage, 
        canvas.width * qrcodePublicCoords["x"], 
        canvas.height * qrcodePublicCoords["y"], 
        qrWidth, 
        qrHeight
      );

      // Draw label
      const labelCoords = <%= raw @hong_bao.paper.elements["qrcode_public_key_label"].to_json %>;
      drawLabelWithBackground(ctx, 'Public Key', labelCoords, canvas);
    };
  }

  const paperImageFrontUrl = '<%= 
    front_image = @hong_bao.paper.images.find { |image| image.filename.to_s.downcase.include?('front') }
    front_image ? url_for(front_image) : ""
  %>';
  loadImageFront(paperImageFrontUrl);
  const paperImageBackUrl = '<%= 
    back_image = @hong_bao.paper.images.find { |image| image.filename.to_s.downcase.include?('back') }
    back_image ? url_for(back_image) : ""
  %>'; 
  loadImageBack(paperImageBackUrl);
</script> 