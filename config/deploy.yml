# Name of your application. Used to uniquely configure containers.
service: hongbao

# Name of the container image.
image: hackerhouse/hongbao

# Deploy to these servers.
servers:
  web:
    - 159.69.199.205
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# Set ssl: false if using something like Cloudflare to terminate SSL (but keep host!).
proxy:
  ssl: true
  hosts:
    - hongbaob.tc
    - www.hongbaob.tc

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: stephane@hackerhouse.paris

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true
    # For webooks assets etc
    APP_HOST: hongbaob.tc
    STRIPE_PRODUCT_IDS: prod_SOpApecECpJnYH,prod_SOpA89K3IVc5fn,prod_SOpAOt3ccxW67Z # Mini, Family, Maximalist
    DEMO_PAPER_ID: 60

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug
    COMMIT_SHA: '<%= `git rev-parse --short HEAD`.strip %>'
    COMMIT_TIME: '<%= `git show -s --format=%ci HEAD`.strip %>'

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  migrate: app exec --interactive --reuse "bin/rails db:migrate"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "hongbao_storage:/rails/storage"
  - "hongbao_data:/rails/data"  # Only for database file

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: arm64
  cache:
    type: registry

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  args:
  #   RUBY_VERSION: 3.2.2
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY
    COMMIT_SHA: <%= `git rev-parse HEAD`.strip %>
    COMMIT_TIME: <%= `git show -s --format=%ci HEAD`.strip %>
# Use a different ssh user than root
ssh:
  user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data